unit SSPatternBuilder;

interface

uses
  System.RegularExpressions;

type
  TSSPatternBuilder = record
    const
      Any             = '.';
      Letter          = '[A-Za-z]';
      Digit           = '[0-9]';
      UpperCaseLetter = '[A-Z]';
      LowerCaseLetter = '[a-z]';
    class function ExtractPatternFrom(aValue: String): String;
    class function Group(aPattern: String; aIsPattern: Boolean = True): String; static;
    class function CheckGroup(aPattern: String; aIsPattern: Boolean = True): String; static;
    class function Optional(aPattern: String; aIsPattern: Boolean = True): String; static;
  end;

implementation

{ TSSPatternBuilder }

class function TSSPatternBuilder.CheckGroup(aPattern: String): String;
begin
  if TRegEx.IsMatch(aPattern, '^\[.*\]$') then
    Result := aPattern
  else
    Result := Group(aPattern);
end;

class function TSSPatternBuilder.ExtractPatternFrom(aValue: String): String;
begin

end;

class function TSSPatternBuilder.Group(aPattern: String): String;
begin
  Result := '('+aPattern+')';
end;

class function TSSPatternBuilder.Optional(aPattern: String): String;
begin
  Result := aPattern+'?';
end;

end.
